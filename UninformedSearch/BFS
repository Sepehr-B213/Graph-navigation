from collections import defaultdict
import networkx as nx
import matplotlib.pyplot as plt

class Graph:

    def __init__(self):
        self.graph = defaultdict(list)

    def addEdge(self, u, v):
        self.graph[u].append(v)

    def bfs(self, start, target):
        visited = set()
        queue = []
        queue.append(start)
        visited.add(start)
        path = list()


        while queue:

            self.print_result(queue,visited,path)
            parent = queue.pop(0)
            path.append(parent)
            if parent == target:
                return path

            for child in self.graph[parent]:
                if child not in visited:
                    visited.add(child)
                    queue.append(child)




    def print_result(self,Queue, Visit, Path):
        print("Element of queue:", Queue)
        print("pop %s from queue"%Queue[0],"\n")
        print("visited nodes:", Visit)
        print("Path of graph:")
        print(*Path,sep=" --> ")
        print("------"*10)



g = Graph()
g.addEdge(1, 2)
g.addEdge(1, 3)
g.addEdge(2, 4)
g.addEdge(2, 5)
g.addEdge(3, 6)
g.addEdge(3, 7)
g.addEdge(4, 8)
g.addEdge(4, 9)
g.addEdge(5, 10)
g.addEdge(5, 11)
g.addEdge(6, 12)
g.addEdge(6, 13)
g.addEdge(7, 14)
g.addEdge(7, 15)
g.addEdge(8, 16)
g.addEdge(8, 17)
g.addEdge(9, 18)
g.addEdge(9, 19)
g.addEdge(16, 20)
g.addEdge(16, 21)
g.addEdge(17, 22)
g.addEdge(17, 23)
g.addEdge(20, 24)
g.addEdge(20, 25)

final_path = g.bfs(1,18)
print("Final path:")
print(*final_path,sep=" --> ")


